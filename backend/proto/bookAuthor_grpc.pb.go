// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: backend/proto/bookAuthor.proto

package proto_bookAuthor_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookAuthorServiceClient is the client API for BookAuthorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookAuthorServiceClient interface {
	GetBooks(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*GetBookResponse, error)
	GetAuthors(ctx context.Context, in *GetAuthorRequest, opts ...grpc.CallOption) (*GetAuthorResponse, error)
}

type bookAuthorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookAuthorServiceClient(cc grpc.ClientConnInterface) BookAuthorServiceClient {
	return &bookAuthorServiceClient{cc}
}

func (c *bookAuthorServiceClient) GetBooks(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*GetBookResponse, error) {
	out := new(GetBookResponse)
	err := c.cc.Invoke(ctx, "/pb.bookAuthorService/GetBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookAuthorServiceClient) GetAuthors(ctx context.Context, in *GetAuthorRequest, opts ...grpc.CallOption) (*GetAuthorResponse, error) {
	out := new(GetAuthorResponse)
	err := c.cc.Invoke(ctx, "/pb.bookAuthorService/GetAuthors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookAuthorServiceServer is the server API for BookAuthorService service.
// All implementations must embed UnimplementedBookAuthorServiceServer
// for forward compatibility
type BookAuthorServiceServer interface {
	GetBooks(context.Context, *GetBookRequest) (*GetBookResponse, error)
	GetAuthors(context.Context, *GetAuthorRequest) (*GetAuthorResponse, error)
	mustEmbedUnimplementedBookAuthorServiceServer()
}

// UnimplementedBookAuthorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookAuthorServiceServer struct {
}

func (UnimplementedBookAuthorServiceServer) GetBooks(context.Context, *GetBookRequest) (*GetBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedBookAuthorServiceServer) GetAuthors(context.Context, *GetAuthorRequest) (*GetAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthors not implemented")
}
func (UnimplementedBookAuthorServiceServer) mustEmbedUnimplementedBookAuthorServiceServer() {}

// UnsafeBookAuthorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookAuthorServiceServer will
// result in compilation errors.
type UnsafeBookAuthorServiceServer interface {
	mustEmbedUnimplementedBookAuthorServiceServer()
}

func RegisterBookAuthorServiceServer(s grpc.ServiceRegistrar, srv BookAuthorServiceServer) {
	s.RegisterService(&BookAuthorService_ServiceDesc, srv)
}

func _BookAuthorService_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAuthorServiceServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bookAuthorService/GetBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAuthorServiceServer).GetBooks(ctx, req.(*GetBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookAuthorService_GetAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAuthorServiceServer).GetAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bookAuthorService/GetAuthors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAuthorServiceServer).GetAuthors(ctx, req.(*GetAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookAuthorService_ServiceDesc is the grpc.ServiceDesc for BookAuthorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookAuthorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.bookAuthorService",
	HandlerType: (*BookAuthorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBooks",
			Handler:    _BookAuthorService_GetBooks_Handler,
		},
		{
			MethodName: "GetAuthors",
			Handler:    _BookAuthorService_GetAuthors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/proto/bookAuthor.proto",
}
